<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solid.Http</name>
    </assembly>
    <members>
        <member name="T:Solid.Http.Abstractions.ISolidHttpBuilder">
            <summary>
            A builder used to configure Solid.Http.Builder
            </summary>
        </member>
        <member name="P:Solid.Http.Abstractions.ISolidHttpBuilder.Services">
            <summary>
            The service collection
            </summary>
        </member>
        <member name="P:Solid.Http.Abstractions.ISolidHttpBuilder.Properties">
            <summary>
            Properties that can be used in extensions
            </summary>
        </member>
        <member name="P:Solid.Http.Abstractions.ISolidHttpBuilder.Core">
            <summary>
            The core builder
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Service collection extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSolidHttp(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add SolidHttp to the service collection using the default features (json)
            </summary>
            <param name="services">The service collection</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSolidHttp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Solid.Http.Abstractions.ISolidHttpBuilder})">
            <summary>
            Add SolidHttp to the service collection using the default features (json)
            </summary>
            <param name="services">The service collection</param>
            <param name="action">A configuration action</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions">
            <summary>
            ISolidHttpBuilder extensions methods
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.AddDeserializer(Solid.Http.Abstractions.ISolidHttpBuilder,Solid.Http.Abstractions.IResponseDeserializerFactory,System.String,System.String[])">
            <summary>
            Adds a deserializer factory used to deserialize the specified mime types
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="factory">The deserializer factory instance</param>
            <param name="mimeType">The mime type to deserialize</param>
            <param name="more">More mime types</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.AddDeserializer``1(Solid.Http.Abstractions.ISolidHttpBuilder,System.String,System.String[])">
            <summary>
            Adds a deserializer factory used to deserialize the specified mime types
            </summary>
            <typeparam name="TFactory">The deserializer factory type</typeparam>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="mimeType">The mime type to deserialize</param>
            <param name="more">More mime types</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.UseSingleInstanceHttpClientProvider(Solid.Http.Abstractions.ISolidHttpBuilder)">
            <summary>
            Configures Solid.Http to use one HttpClient for the whole application
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.UseInstancePerHostHttpClientProvider(Solid.Http.Abstractions.ISolidHttpBuilder)">
            <summary>
            Configures Solid.Http to use one HttpClient for each host requested.
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.UseHttpClientProvider``1(Solid.Http.Abstractions.ISolidHttpBuilder,``0)">
            <summary>
            Configures Solid.Http to use a custom HttpClientProvider
            </summary>
            <typeparam name="TProvider">The custom HttpClientProvider type</typeparam>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="instance">The HttpClientFactory instance</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.UseHttpClientProvider``1(Solid.Http.Abstractions.ISolidHttpBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Configures Solid.Http to use a custom HttpClientProvider
            </summary>
            <typeparam name="TProvider">The custom HttpClientProvider type</typeparam>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="factory">The factory used to create the HttpClientFactory</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.UseHttpClientProvider``1(Solid.Http.Abstractions.ISolidHttpBuilder)">
            <summary>
            Configures Solid.Http to use a custom HttpClientProvider
            </summary>
            <typeparam name="TProvider">The custom HttpClientProvider type</typeparam>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <returns>ISolidHttpBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnClientCreated(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{Solid.Http.Abstractions.ISolidHttpClient})">
            <summary>
            Add a global handler to be run when every Solid.Http client object is created.
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnClientCreated(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.IServiceProvider,Solid.Http.Abstractions.ISolidHttpClient})">
            <summary>
            Add a global handler to be run when every Solid.Http client object is created.
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequestCreated(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{Solid.Http.Abstractions.ISolidHttpRequest})">
            <summary>
            Add a global handler to be run when every Solid.Http request object is created.
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequestCreated(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.IServiceProvider,Solid.Http.Abstractions.ISolidHttpRequest})">
            <summary>
            Add a global handler to be run when every Solid.Http request object is created.
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequest(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Add a global handler to be run just before every request is sent
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequest(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.IServiceProvider,System.Net.Http.HttpRequestMessage})">
            <summary>
            Add a global handler to be run just before every request is sent
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequest(Solid.Http.Abstractions.ISolidHttpBuilder,System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task})">
            <summary>
            Add a global handler to be run just before every request is sent
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="func">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnRequest(Solid.Http.Abstractions.ISolidHttpBuilder,System.Func{System.IServiceProvider,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task})">
            <summary>
            Add a global handler to be run just before every request is sent
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="func">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnResponse(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Add a global handler to be run the moment every response is received
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnResponse(Solid.Http.Abstractions.ISolidHttpBuilder,System.Action{System.IServiceProvider,System.Net.Http.HttpResponseMessage})">
            <summary>
            Add a global handler to be run the moment every response is received
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="action">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnResponse(Solid.Http.Abstractions.ISolidHttpBuilder,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
            Add a globa
            <param name="builder">The extended ISolidHttpBuilder</param>l handler to be run the moment every response is received
            </summary>
            <param name="func">The handler to be run</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SolidHttpBuilderExtensions.OnResponse(Solid.Http.Abstractions.ISolidHttpBuilder,System.Func{System.IServiceProvider,System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
            Add a global handler to be run the moment every response is received
            </summary>
            <param name="builder">The extended ISolidHttpBuilder</param>
            <param name="func">The handler to be run</param>
            <returns>The builder</returns>
        </member>
    </members>
</doc>
